import { addEntity, createEmptyBlueprint, encodePlan } from "@jensforstmann/factorio-blueprint-tools";
import { Component, For } from "solid-js";
import { createStore, SetStoreFunction } from "solid-js/store";
import { Title } from "solid-start";
import { CheckboxInput, NumberInput, TextInput } from "~/components/inputs";
import VanillaRecipes from "./vanillaRecipes.json";

type Recipe = {
    name: string;
    enabled: boolean;
    category: string;
    order: string;
    energy: number;
    group_name: string;
    group_order: string;
    subgroup_name: string;
    subgroup_order: string;
    request_paste_multiplier: number;
    can_be_researched: boolean;
    main_product: null | string;
    main_product_stack_size: null | number;
    ingredients: Array<{
        name: string;
        amount: number;
        stack_size: number;
    }>;
    selected?: boolean;
};

type Settings = {
    machineName: string;
    machineWidth: number;
    machineHeight: number;
    machineSpeed: number;
    rowLength: number;
    columnSpace: number;
    rowSpace: number;
    sourceChestName: string;
    sourceChestWidth: number;
    sourceChestHeight: number;
    requestFromBufferChests: boolean;
    targetChestName: string;
    targetChestWidth: number;
    targetChestHeight: number;
    targetChestSetRequest: boolean;
    inserterName: string;
    outserterName: string;
    requestStackLimit: number;
    craftStackLimit: number;
};

const getBlueprint = (settings: Settings, recipes: Recipe[]): string => {
    let currentRow = 0;
    let currentCol = 0;
    const blockWidth = Math.max(settings.machineWidth, settings.sourceChestWidth + settings.targetChestWidth) + settings.columnSpace;
    const blockHeight = settings.machineHeight + Math.max(settings.sourceChestHeight, settings.targetChestHeight) + settings.rowSpace + 1;
    const bp = createEmptyBlueprint();
    bp.blueprint.label = "Factorio-Make-Everything";
    // TODO: update description
    bp.blueprint.description = "This blueprint was generated by this site:\nhttps://jensforstmann.github.io/factorio-make-everything-generator/\n\nReport bugs & issues or make suggestions at:\nhttps://github.com/JensForstmann/factorio-make-everything-generator"
    bp.blueprint.icons = [
        { signal: { type: 'virtual', name: 'signal-M' }, index: 1 },
        { signal: { type: 'virtual', name: 'signal-E' }, index: 2 },
        { signal: { type: 'virtual', name: 'signal-black' }, index: 3 },
        { signal: { type: 'virtual', name: 'signal-black' }, index: 4 }
    ];

    recipes.filter(r => r.selected).forEach((r) => {
        addEntity(bp, {
            name: settings.machineName,
            position: {
                x: currentCol * blockWidth + settings.machineWidth / 2,
                y: currentRow * blockHeight + settings.machineHeight / 2,
            },
            recipe: r.name
        });
        addEntity(bp, {
            name: settings.inserterName,
            position: {
                x: currentCol * blockWidth + 0.5,
                y: currentRow * blockHeight + settings.machineHeight + 0.5,
            },
            direction: 4
        });
        addEntity(bp, {
            name: settings.outserterName,
            position: {
                x: currentCol * blockWidth + settings.sourceChestWidth + 0.5,
                y: currentRow * blockHeight + settings.machineHeight + 0.5,
            },
            control_behavior: {
                logistic_condition: {
                    first_signal: {
                        type: "item",
                        name: r.main_product
                    },
                    constant: (r.main_product_stack_size ?? 1) * settings.craftStackLimit,
                    comparator: "<"
                },
                connect_to_logistic_network: true
            }
        });
        addEntity(bp, {
            name: settings.sourceChestName,
            position: {
                x: currentCol * blockWidth + settings.sourceChestWidth / 2,
                y: currentRow * blockHeight + settings.machineHeight + 1 + settings.sourceChestHeight / 2,
            },
            request_filters: r.ingredients.map((ing, idx) => {
                return {
                    index: idx + 1,
                    name: ing.name,
                    count: Math.max(
                        1,
                        Math.floor(
                            Math.min(
                                ing.stack_size * settings.requestStackLimit,
                                Math.max(
                                    ing.amount,
                                    (ing.amount * r.request_paste_multiplier * settings.machineSpeed) /
                                    r.energy
                                )
                            )
                        )
                    )
                }
            }),
            request_from_buffers: settings.requestFromBufferChests,
        });
        addEntity(bp, {
            name: settings.targetChestName,
            position: {
                x: currentCol * blockWidth + settings.sourceChestWidth + settings.targetChestWidth / 2,
                y: currentRow * blockHeight + settings.machineHeight + 1 + settings.targetChestHeight / 2
            },
            request_filters: settings.targetChestSetRequest && r.main_product ? [{
                index: 1,
                name: r.main_product,
                count: 1_000_000,
            }] : [],
        })

        currentCol++;
        if (currentCol === settings.rowLength) {
            currentCol = 0;
            currentRow++;
        }
    })
    return encodePlan(bp);
};

const Settings: Component<{
    settings: Settings;
    setSettings: SetStoreFunction<Settings>;
}> = (props) => {
    return (
        <>
            <div class="grid grid-cols-4 space-x-4">
                <TextInput label="Machine Name" value={props.settings.machineName} setValue={(v) => props.setSettings("machineName", v)} />
                <NumberInput label="Machine Width" value={props.settings.machineWidth} setValue={(v) => props.setSettings("machineWidth", v)} min={1} />
                <NumberInput label="Machine Height" value={props.settings.machineHeight} setValue={(v) => props.setSettings("machineHeight", v)} min={1} />
                <NumberInput label="Machine Speed" value={props.settings.machineSpeed} setValue={(v) => props.setSettings("machineSpeed", v)} min={0} />
            </div>
            <div class="grid grid-cols-4 space-x-4">
                <NumberInput label="Machines per Row" value={props.settings.rowLength} setValue={(v) => props.setSettings("rowLength", v)} min={1} />
                <NumberInput label="Space between Rows" value={props.settings.rowSpace} setValue={(v) => props.setSettings("rowSpace", v)} min={0} />
                <NumberInput label="Space between Machines" value={props.settings.columnSpace} setValue={(v) => props.setSettings("columnSpace", v)} min={0} />
            </div>
            <div class="grid grid-cols-4 space-x-4">
                <TextInput label="Source Chest Name" value={props.settings.sourceChestName} setValue={(v) => props.setSettings("sourceChestName", v)} />
                <NumberInput label="Source Chest Width" value={props.settings.sourceChestWidth} setValue={(v) => props.setSettings("sourceChestWidth", v)} min={1} />
                <NumberInput label="Source Chest Height" value={props.settings.sourceChestHeight} setValue={(v) => props.setSettings("sourceChestHeight", v)} min={1} />
                <CheckboxInput label="Request from Buffer Chests" value={props.settings.requestFromBufferChests} setValue={(v) => props.setSettings("requestFromBufferChests", v)} />
            </div>
            <div class="grid grid-cols-4 space-x-4">
                <TextInput label="Target Chest Name" value={props.settings.targetChestName} setValue={(v) => props.setSettings("targetChestName", v)} />
                <NumberInput label="Target Chest Width" value={props.settings.targetChestWidth} setValue={(v) => props.setSettings("targetChestWidth", v)} min={1} />
                <NumberInput label="Target Chest Height" value={props.settings.targetChestHeight} setValue={(v) => props.setSettings("targetChestHeight", v)} min={1} />
                <CheckboxInput label="Target Chest set Requests" value={props.settings.targetChestSetRequest} setValue={(v) => props.setSettings("targetChestSetRequest", v)} />
            </div>
            <div class="grid grid-cols-4 space-x-4">
                <TextInput label="Inserter Name" value={props.settings.inserterName} setValue={(v) => props.setSettings("inserterName", v)} />
                <TextInput label="Outserter Name" value={props.settings.outserterName} setValue={(v) => props.setSettings("outserterName", v)} />
            </div>
            <div class="grid grid-cols-4 space-x-4">
                <NumberInput label="Request Stack Limit" value={props.settings.requestStackLimit} setValue={(v) => props.setSettings("requestStackLimit", v)} min={0} />
                <NumberInput label="Craft Stack Limit" value={props.settings.craftStackLimit} setValue={(v) => props.setSettings("craftStackLimit", v)} min={0} />
            </div>
        </>
    );
};

const Page = () => {
    let globalCheckbox: HTMLInputElement | undefined;
    const [recipes, setRecipes] = createStore<Array<Recipe>>(VanillaRecipes);
    const [settings, setSettings] = createStore<Settings>({
        machineName: "assembling-machine-3",
        machineWidth: 3,
        machineHeight: 3,
        machineSpeed: 1.25,
        rowLength: 5,
        columnSpace: 0,
        rowSpace: 0,
        sourceChestName: "logistic-chest-requester",
        sourceChestWidth: 1,
        sourceChestHeight: 1,
        requestFromBufferChests: true,
        targetChestName: "logistic-chest-buffer",
        targetChestWidth: 1,
        targetChestHeight: 1,
        targetChestSetRequest: true,
        inserterName: "stack-inserter",
        outserterName: "stack-inserter",
        requestStackLimit: 3,
        craftStackLimit: 4,
    });
    const toggleRecipe = (name: string) => {
        setRecipes((recipe) => recipe.name === name, "selected", (selected) => !selected)
    };
    return (
        <div class="w-full max-w-4xl m-auto mb-48">
            <Title>Make Everything Generator | Factorio | Gaming Tools</Title>
            <div class="prose dui-prose">
                <h2>Make Everything Generator</h2>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Explicabo quas nesciunt laudantium et debitis corporis accusamus quasi repudiandae nobis vero dolorem delectus voluptatum fuga recusandae dolor veritatis expedita, voluptas tempore.</p>
            </div>
            <div class="overflow-x-auto w-full">
                <table class="dui-table w-full">
                    <thead>
                        <tr>
                            <th>
                                <label>
                                    <input type="checkbox" class="dui-checkbox"
                                        ref={globalCheckbox}
                                        onChange={() => {
                                            if (recipes.filter((recipe) => recipe.selected).length === recipes.length) {
                                                setRecipes(() => true, "selected", false);
                                            } else {
                                                setRecipes(() => true, "selected", true);
                                            }
                                            if (globalCheckbox) {
                                                globalCheckbox.indeterminate = false;
                                            }
                                        }}
                                    />
                                </label>
                            </th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Group</th>
                            <th>Subgroup</th>
                        </tr>
                    </thead>
                    <tbody>
                        <For each={recipes}>
                            {(recipe) =>
                                <tr>
                                    <th>
                                        <label>
                                            <input
                                                type="checkbox"
                                                class="dui-checkbox"
                                                checked={recipe.selected}
                                                onChange={() => {
                                                    toggleRecipe(recipe.name);
                                                    if (globalCheckbox) {
                                                        const selected = recipes.filter(recipe => recipe.selected).length;
                                                        globalCheckbox.indeterminate = selected > 0 && selected !== recipes.length;
                                                        globalCheckbox.checked = selected === recipes.length;
                                                    }
                                                }}
                                            />
                                        </label>
                                    </th>
                                    <td>{recipe.name}</td>
                                    <td>{recipe.category}</td>
                                    <td>{recipe.group_name}</td>
                                    <td>{recipe.subgroup_name}</td>
                                </tr>
                            }
                        </For>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Group</th>
                            <th>Subgroup</th>
                        </tr>
                    </tfoot>

                </table>
            </div>
            <div>
                <Settings
                    settings={settings}
                    setSettings={setSettings}
                />
            </div>
            <div>
                <button class="dui-btn" onClick={() => {
                    navigator.clipboard.writeText(
                        getBlueprint(settings, recipes.filter((r) => r.selected))
                    );
                }}>Copy Blueprint</button>
            </div>
        </div>
    );
};

export default Page;
